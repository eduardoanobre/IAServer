spring.application.name=ia-processor-standalone
server.port=2042
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.enabled=true
server.servlet.encoding.force=true
server.error.include-message=always


spring.cloud.stream.function.routing.enabled=true
spring.cloud.stream.function.bindings.processIa-in-0=input
spring.cloud.stream.bindings.processIa-in-0.binder=kafka
spring.cloud.stream.bindings.processIa-in-0.consumer.instance-count=1




# =============================================================================
# KAFKA OPTIMIZED CONFIGURATION
# =============================================================================
spring.cloud.stream.kafka.binder.brokers=192.168.10.116:9092
spring.cloud.stream.kafka.binder.auto-create-topics=true
spring.cloud.stream.kafka.binder.auto-add-partitions=true
spring.cloud.stream.kafka.binder.required-acks=1
spring.cloud.stream.kafka.binder.min-partition-count=3
spring.cloud.stream.kafka.binder.replication-factor=1


spring.cloud.stream.kafka.binder.configuration.key.serializer=org.apache.kafka.common.serialization.StringSerializer
spring.cloud.stream.kafka.binder.configuration.value.serializer=org.apache.kafka.common.serialization.StringSerializer
spring.cloud.stream.kafka.binder.configuration.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.cloud.stream.kafka.binder.configuration.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.cloud.stream.kafka.binder.configuration.spring.json.use.type.headers=false

# =============================================================================
# CONSUMER OPTIMIZED - IA REQUESTS
# =============================================================================
spring.cloud.stream.kafka.binder.consumer-properties.auto.offset.reset=latest
spring.cloud.stream.kafka.binder.consumer-properties.enable.auto.commit=false
spring.cloud.stream.kafka.binder.consumer-properties.max.poll.interval.ms=300000
spring.cloud.stream.kafka.binder.consumer-properties.max.poll.records=5
spring.cloud.stream.kafka.binder.consumer-properties.session.timeout.ms=10000
spring.cloud.stream.kafka.binder.consumer-properties.heartbeat.interval.ms=3000

# =============================================================================
# PRODUCER OPTIMIZED - IA RESPONSES
# =============================================================================
spring.cloud.stream.kafka.binder.producer-properties.acks=all
spring.cloud.stream.kafka.binder.producer-properties.retries=3
spring.cloud.stream.kafka.binder.producer-properties.enable.idempotence=true
spring.cloud.stream.kafka.binder.producer-properties.request.timeout.ms=30000
spring.cloud.stream.kafka.binder.producer-properties.delivery.timeout.ms=120000
spring.cloud.stream.kafka.binder.producer-properties.compression.type=zstd

# =============================================================================
# INPUT BINDING - RECEIVES ALL IA REQUESTS
# =============================================================================
spring.cloud.stream.bindings.processIa-in-0.destination=ia.requests
spring.cloud.stream.bindings.processIa-in-0.group=ia-processor-standalone
spring.cloud.stream.bindings.processIa-in-0.content-type=text/plain
spring.cloud.stream.bindings.processIa-in-0.consumer.auto-startup=true
spring.cloud.stream.bindings.processIa-in-0.consumer.concurrency=3
spring.cloud.stream.bindings.processIa-in-0.consumer.max-attempts=5
spring.cloud.stream.bindings.processIa-in-0.consumer.back-off-initial-interval=1000

# DLQ para mensagens com falha
spring.cloud.stream.kafka.bindings.processIa-in-0.consumer.enable-dlq=true
spring.cloud.stream.kafka.bindings.processIa-in-0.consumer.dlq-name=ia.requests.DLT

# =============================================================================
# OUTPUT BINDING - SENDS TO ALL MODULES
# =============================================================================
spring.cloud.stream.bindings.processIa-out-0.destination=ia.responses
spring.cloud.stream.bindings.processIa-out-0.content-type=text/plain
#spring.cloud.stream.bindings.processIa-out-0.producer.required-groups=workspace-ia-replies,erp-ia-replies,marketing-ia-replies
spring.cloud.stream.bindings.processIa-out-0.producer.partition-count=3

# =============================================================================
# RESILIENCE4J - CIRCUIT BREAKERS
# =============================================================================
resilience4j.circuitbreaker.instances.iaClient.register-health-indicator=true
resilience4j.circuitbreaker.instances.iaClient.sliding-window-size=20
resilience4j.circuitbreaker.instances.iaClient.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.iaClient.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.iaClient.wait-duration-in-open-state=10s

# =============================================================================
# IA PROCESSING CONFIGURATION
# =============================================================================
erp.ia.max-payload-size=500000
erp.ia.reply-timeout-ms=60000
erp.ia.max-pending-requests=1000
erp.ia.processing.max-concurrent-requests=10
erp.ia.processing.queue-capacity=1000
erp.ia.processing.timeout-seconds=300

# Base64 wrapper configuration
ia.base64.wrapper.enabled=true
ia.message.types.ia-request=IA_REQUEST
ia.message.types.ia-response=IA_RESPONSE
ia.message.types.startup-test=STARTUP_TEST
ia.message.types.connection-test=CONNECTION_TEST

# Test configuration
ia.test.chatid.prefix=test-
ia.connection.test.interval.seconds=30

# =============================================================================
# HEALTH AND MONITORING
# =============================================================================
management.health.kafka.enabled=true
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=health,info,kafka,metrics

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
logging.level.br.com.ia.services.IaProcessor=INFO
logging.level.br.com.ia.sdk=DEBUG
logging.level.org.springframework.cloud.stream=INFO
logging.level.org.springframework.kafka=WARN

# Console pattern with emojis for better visibility
logging.pattern.console=%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n